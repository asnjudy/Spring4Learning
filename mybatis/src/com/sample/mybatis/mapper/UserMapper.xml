<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//disconf.mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="com.sample.mybatis.mapper.UserMapper">

    <!--
     开启本maper的namespace下的二级缓存
     type: 指定cache接口的实现类的类型，mybatis默认使用 PerpetualCache
     要和 ehcache 整合，需要配置type为ehcache实现cache接口的类型

    <cache type="org.disconf.mybatis.caches.ehcache.LoggingEhcache"/> -->

    <!--需求:通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
     id: 标识映射文件中的sql，为statement的id
         将sql语句封装到mappedStatement对象中，所以将id称为statement的id
     parameterType: 指定输入参数的类型
     #{} 标示一个占位符,
     #{value} 其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意。
     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象
     -->
    <select id="findUserById" parameterType="int" resultType="com.sample.mybatis.po.User">
        SELECT * FROM user WHERE id=#{value}
    </select>

    <!--
    根据用户名模糊查询用户信息
    resultType: 指定就是单条记录所映射的java对象类型
    ${}: 表示拼接sql串，将接收到的内容不加任何修饰拼接在sql中
    ${value}: 接收输入参数的内容，如果传入的类型是简单类型，${}中只能使用value
     -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.sample.mybatis.po.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>

    <!--
     添加用户
     parameterType: 指定输入的参数类型是pojo
     #{}中是pojo的属性，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
     -->
    <insert id="insertUser" parameterType="com.sample.mybatis.po.User">
        <!--
         将输入数据的主键返回，返回到user对象中
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username, birthday, sex, address) values (#{username}, #{birthday}, #{sex}, #{address})
    </insert>

    <!-- 根据id删除用户 -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!--
     根据id更新用户
     需要传入用户的id和待更新信息
     -->
    <update id="updateUser" parameterType="com.sample.mybatis.po.User">
        UPDATE user SET username=#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address}
        WHERE id=#{id}
    </update>

    <!-- 定义sql片段 -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                AND user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND user.username LIKE '%${userCustom.username}%'
            </if>
            <if test="ids!=null">
                <!-- 使用实现下边的sql拼接：
                 AND (id=1 OR id=10 OR id=16)
                 -->
                <foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">
                    id = #{user_id}
                </foreach>
            </if>
        </if>
    </sql>

    <!--
     用户综合信息查询
     #{userCustom.sex}: 取出pojo包装对象中的性别值
     ${userCustom.username}: 取出pojo包装对象中的用户名
     -->
    <select id="findUserList" parameterType="com.sample.mybatis.po.UserQueryVo" resultType="com.sample.mybatis.po.UserCustom">
        SELECT * FROM user
        <!-- where 可以自动去掉条件中的第一个and -->
        <where>
            <!-- 引用sql片段的id, 如果refid指定的id不在本mapper文件中，需要前边加namespace -->
            <include refid="query_user_where"></include>
        </where>
    </select>

    <!--
     用户信息综合查询总数
     -->
    <select id="findUserCount" parameterType="com.sample.mybatis.po.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        <where>
            <if test="userCustom!=null">
                <if test="userCutome.sex != null and userCustom.sex != '' ">
                    AND user.sex = #{userCustom.username}
                </if>
                <if test="">
                    AND user.username LIKE '%${userCutom.username}%'
                </if>
            </if>
        </where>
    </select>


    <!-- 定义resultMap -->
    <resultMap type="com.sample.mybatis.po.User" id="userResultMap">
        <id column="id_" property="id" />
        <result column="username_" property="username" />
    </resultMap>

    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id, id_, username, username_ FROM user WHERE id=#{value}
    </select>

</mapper>